import warnings
from typing import Optional

from .base import IntegerSize
from .compiler import CompiledBrainfuck
from .decoder import DecodedBrainfuck
from .encoder import EncodedBrainfuck

__all__ = (
    "BrainfuckTools",
    "compile_bf",
    "decode_bf",
    "encode_text",
    "set_default_array_size",
    "set_default_int_size",
)


class BrainfuckTools:
    """The BrainfuckTools class is a wrapper for the compiler, decoder and encoder methods.

    It comes with some tools
    to make it easier to use, such as caching the last compiled code, the last decoded code and the last encoded
    text.

    Attributes
    ----------
    last_compiled: Optional[CompiledBrainfuck]
        The last compiled code.
    last_decoded: Optional[DecodedBrainfuck]
        The last decoded code.
    last_encoded: Optional[EncodedBrainfuck]
        The last encoded text.
    """

    def __init__(self, array_size: int = 30000, int_size: IntegerSize = 8) -> None:
        self._array_size = array_size
        self._int_size = int_size
        self.last_compiled: Optional[CompiledBrainfuck] = None
        self.last_decoded: Optional[DecodedBrainfuck] = None
        self.last_encoded: Optional[EncodedBrainfuck] = None

    @property
    def array_size(self) -> int:
        """The array size."""
        return self._array_size

    @property
    def int_size(self) -> IntegerSize:
        """The integer size."""
        return self._int_size

    def _new_compiler(self) -> CompiledBrainfuck:
        compiler = CompiledBrainfuck(
            array_size=self._array_size, int_size=self._int_size
        )
        self.last_compiled = compiler
        return compiler

    def _new_decoder(self) -> DecodedBrainfuck:
        decoder = DecodedBrainfuck()
        self.last_decoded = decoder
        return decoder

    def _new_encoder(self) -> EncodedBrainfuck:
        encoder = EncodedBrainfuck(array_size=self._array_size, int_size=self._int_size)
        self.last_encoded = encoder
        return encoder

    def compile(self, code: str) -> CompiledBrainfuck:
        """
        Compiles a brainfuck code into python code.

        Parameters
        ----------
        code: str
            The brainfuck code to compile.

        Returns
        -------
        CompiledBrainfuck
            The compiled code.
        """
        compiler = self._new_compiler()
        compiler.parse(code)
        return compiler

    def decode(self, value: str) -> DecodedBrainfuck:
        """Decodes brainfuck code into text.

        Parameters
        ----------
        value: str
            The brainfuck code to decode.

        Returns
        -------
        DecodedBrainfuck
            The decoded code.
        """
        compiler = CompiledBrainfuck(
            array_size=self._array_size, int_size=self._int_size
        )
        compiler.parse(value)
        decoder = self._new_decoder()
        decoder.parse(compiler.result or "")
        return decoder

    def encode(self, value: str) -> EncodedBrainfuck:
        """Encodes text into brainfuck code.

        Parameters
        ----------
        value: str
            The text to encode.

        Returns
        -------
        EncodedBrainfuck
            The encoded text.
        """
        encoder = self._new_encoder()
        encoder.parse(value)
        return encoder


_MAIN_INSTANCE: Optional[BrainfuckTools] = None


def _get_instance(warn_existing: bool = False) -> BrainfuckTools:
    global _MAIN_INSTANCE  # pylint: disable=global-statement
    if _MAIN_INSTANCE is None:
        _MAIN_INSTANCE = BrainfuckTools()
    elif warn_existing:
        warnings.warn(
            "Modifying array size after the first instance has been created. This may cause issues with data generated"
            "by previous instances.",
            RuntimeWarning,
        )
    return _MAIN_INSTANCE


def set_default_array_size(size: int) -> None:
    """Sets the default array size. This size will be used for the :func:`compile`, :func:`decode`, and :func:`encode`
    functions.

    .. warning::
        This should not be called after :func:`compile`, :func:`decode`, or :func:`encode`, as it may cause issues with
        data generated by previous instances.

    Parameters
    ----------
    size: int
        The new default array size.
    """
    _get_instance()._array_size = size  # pylint: disable=protected-access


def set_default_int_size(size: IntegerSize) -> None:
    """Sets the default integer size. This size will be used for the :func:`compile`, :func:`decode` and :func:`encode`
    functions.

    .. warning::
        This should not be called after :func:`compile`, :func:`decode`, or :func:`encode`, as it may cause issues with
        data generated by previous instances.

    Parameters
    ----------
    size: IntegerSize
        The new default integer size.
    """
    _get_instance()._int_size = size  # pylint: disable=protected-access


# Some shortcuts
def compile_bf(code: str) -> CompiledBrainfuck:
    """Shortcut for :meth:`BrainfuckTools.compile`.

    This is equivalent to ``BrainfuckTools().compile(code)``.

    Parameters
    ----------
    code: str
        The brainfuck code to compile.

    Returns
    -------
    CompiledBrainfuck
        The compiled code.
    """
    return _get_instance().compile(code)


def decode_bf(code: str) -> DecodedBrainfuck:
    """Shortcut for :meth:`BrainfuckTools.decode`.

    This is equivalent to ``BrainfuckTools().decode(code)``.

    Parameters
    ----------
    code: str
        The brainfuck code to decode.

    Returns
    -------
    DecodedBrainfuck
        The decoded text.
    """
    return _get_instance().decode(code)


def encode_text(value: str) -> EncodedBrainfuck:
    """Shortcut for :meth:`BrainfuckTools.encode`.

    This is equivalent to ``BrainfuckTools().encode(text)``.

    Parameters
    ----------
    value: str
        The text to encode.

    Returns
    -------
    EncodedBrainfuck
        The encoded text.
    """
    return _get_instance().encode(value)
